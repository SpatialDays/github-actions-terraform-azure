# standardized template for terraform plan on pull request to branch made 
# by @ivica3730k

# This GitHub action is triggered by push to main branch.

# It is responsible for running Terraform validation and Terraform apply and providing feedback on the pull request with the results.
# The action sets environment variables from the secrets and runs Terraform commands.
# It checks out the code, performs envsubst on the provider_secrets_template file with the environment variables,
# sets up Terraform provider, initializes Terraform with newly create backend configuration file, and validates Terraform code.
# If validation is successful, it runs Terraform apply and outputs the results to a comment on the pull request.
# If validation or apply fails, it creates the github issue with the error message and fails the build.
# The action has permission to read the contents and write issues and pull requests.

# to use it, change your branch names, environment name and secrets names

name: Terraform apply on push to main

permissions:
  contents: read
  issues: write
  pull-requests: write
on:
  push:
    branches:
      - main
  
jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    environment: TF_MAIN_SECRETS
    env:
      TF_VAR_SUBSCRIPTION_ID: ${{ secrets.TF_VAR_SUBSCRIPTION_ID }}
      TF_VAR_CLIENT_ID: ${{ secrets.TF_VAR_CLIENT_ID }}
      TF_VAR_CLIENT_SECRET: ${{ secrets.TF_VAR_CLIENT_SECRET }}
      TF_VAR_TENANT_ID: ${{ secrets.TF_VAR_TENANT_ID }}
      TF_VAR_STATE_RESOURCE_GROUP_NAME: ${{ vars.TF_VAR_STATE_RESOURCE_GROUP_NAME }}
      TF_VAR_STATE_STORAGE_ACCOUNT_NAME: ${{ vars.TF_VAR_STATE_STORAGE_ACCOUNT_NAME }}
      TF_VAR_STATE_CONTAINER_NAME: ${{ vars.TF_VAR_STATE_CONTAINER_NAME }}
      TF_VAR_ENVIRONMENT: ${{ vars.TF_VAR_ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch
      - name: Perform envsubst on provider_secrets_template with environment variables
        run: envsubst < provider_secrets_template > provider_secrets
      - name: Setup Terraform Provider
        uses: hashicorp/setup-terraform@v2
      - name: Terraform init with backend config
        id: init
        run: terraform init -backend-config=provider_secrets
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true
      - name: Terraform apply
        if: steps.validate.outcome != 'failure'
        id: apply
        run: terraform apply -no-color -auto-approve
        continue-on-error: true
      - name: Create or Update Issue with validate error message
        if: steps.validate.outcome == 'failure'
        uses: dacbd/create-issue-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Terraform validate failed on push to branch ${{ steps.extract_branch.outputs.branch }}
          body: |
            Terraform validate failed on push to branch ${{ steps.extract_branch.outputs.branch }}, unique id ${{ github.run_id }}
            <br>
            Output of terraform validate:
            ```
            ${{ steps.validate.outputs.stderr }}
            ```
      - name: Create or Update Issue with apply error message
        if: steps.apply.outcome == 'failure'
        uses: dacbd/create-issue-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Terraform apply failed on push to branch ${{ steps.extract_branch.outputs.branch }}
          body: |
            Terraform apply failed on push to branch ${{ steps.extract_branch.outputs.branch }}, unique id ${{ github.run_id }}
            <br>
            Output of terraform apply:
            ```
            ${{ steps.apply.outputs.stderr }}
            ```
      - name: Fail the build if terraform validate failed
        if: steps.validate.outcome == 'failure'
        run: exit 1
      - name: Fail the build if terraform apply failed
        if: steps.apply.outcome == 'failure'
        run: exit 1